// skel.scss v3.0.0 | (c) n33 | skel.io | MIT licensed */

// Vars.

/// Breakpoints.
/// @var {list}
$breakpoints: () !global;


// Functions.

/// Removes a specific item from a list.
/// @author Hugo Giraudel
/// @param {list} $list List.
/// @param {integer} $index Index.
/// @return {list} Updated list.
@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

/// Replaces a substring within another string.
/// @author Hugo Giraudel
/// @param {string} $string String.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {string} Updated string.
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

/// Replaces a substring within each string in a list.
/// @param {list} $strings List of strings.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {list} Updated list of strings.
@function str-replace-all($strings, $search, $replace: "") {
  @each $string in $strings {
    $strings: set-nth(
      $strings,
      index($strings, $string),
      str-replace($string, $search, $replace)
    );
  }

  @return $strings;
}

/// Gets a value from a map.
/// @author Hugo Giraudel
/// @param {map} $map Map.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function val($map, $keys...) {
  @if nth($keys, 1) == null {
    $keys: remove-nth($keys, 1);
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

// Mixins.

/// Sets the global box model.
/// @param {string} $model Model (default is content).
@mixin boxModel($model: "content") {
  $x: $model + "-box";

  *,
  *:before,
  *:after {
    -moz-box-sizing: #{$x};
    -webkit-box-sizing: #{$x};
    box-sizing: #{$x};
  }
}

/// Wraps @content in a @media block using a given breakpoint.
/// @param {string} $breakpoint Breakpoint.
/// @param {map} $queries Additional queries.
@mixin breakpoint($breakpoint: null, $queries: null) {
  $query: "screen";

  // Breakpoint.
  @if $breakpoint and map-has-key($breakpoints, $breakpoint) {
    $query: $query + " and " + map-get($breakpoints, $breakpoint);
  }

  // Queries.
  @if $queries {
    @each $k, $v in $queries {
      $query: $query + " and (" + $k + ":" + $v + ")";
    }
  }

  @media #{$query} {
    @content;
  }
}

/// Wraps @content in a @media block targeting a specific orientation.
/// @param {string} $orientation Orientation.
@mixin orientation($orientation) {
  @media screen and (orientation: #{$orientation}) {
    @content;
  }
}

/// Utility mixin for containers.
/// @param {mixed} $width Width.
@mixin containers($width) {
  // Locked?
  $lock: false;

  @if length($width) == 2 {
    $width: nth($width, 1);
    $lock: true;
  }

  // Modifiers.
  .container.\31 25\25 {
    width: 100%;
    max-width: $width * 1.25;
    min-width: $width;
  }
  .container.\37 5\25 {
    width: $width * 0.75;
  }
  .container.\35 0\25 {
    width: $width * 0.5;
  }
  .container.\32 5\25 {
    width: $width * 0.25;
  }

  // Main class.
  .container {
    @if $lock {
      width: $width !important;
    } @else {
      width: $width;
    }
  }
}

/// Utility mixin for grid.
/// @param {list} $gutters Column and row gutters (default is 40px).
/// @param {string} $breakpointName Optional breakpoint name.
@mixin grid($gutters: 40px, $breakpointName: null) {
  // Gutters.
  @include grid-gutters($gutters);
  @include grid-gutters($gutters, \32 00\25, 2);
  @include grid-gutters($gutters, \31 50\25, 1.5);
  @include grid-gutters($gutters, \35 0\25, 0.5);
  @include grid-gutters($gutters, \32 5\25, 0.25);
}

/// Utility mixin for grid.
/// @param {list} $gutters Gutters.
/// @param {string} $class Optional class name.
/// @param {integer} $multiplier Multiplier (default is 1).
@mixin grid-gutters($gutters, $class: null, $multiplier: 1) {
  // Expand gutters if it's not a list.
  @if length($gutters) == 1 {
    $gutters: ($gutters, 0);
  }

  // Get column and row gutter values.
  $c: nth($gutters, 1);
  $r: nth($gutters, 2);

  // Get class (if provided).
  $x: "";

  @if $class {
    $x: "." + $class;
  }
}

/// Wraps @content in vendorized keyframe blocks.
/// @param {string} $name Name.
@mixin keyframes($name) {
  @-moz-keyframes #{$name} {
    @content;
  }
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

///
/// Sets breakpoints.
/// @param {map} $x Breakpoints.
///
@mixin skel-breakpoints($x: ()) {
  $breakpoints: $x !global;
}

///
/// Initializes layout module.
/// @param {map} config Config.
///
@mixin skel-layout($config: ()) {
  // Config.
  $configPerBreakpoint: ();

  $z: map-get($config, "breakpoints");

  @if $z {
    $configPerBreakpoint: $z;
  }

  // Box model.
  $x: map-get($config, "boxModel");

  @if $x {
    /* Box Model */

    @include boxModel($x);
  }

  // Containers.
  $containers: map-get($config, "containers");

  @if $containers {
    /* Containers */

    .container {
      margin-left: auto;
      margin-right: auto;
    }

    // Use default is $containers is just "true".
    @if $containers == true {
      $containers: 960px;
    }

    // Apply base.
    @include containers($containers);

    // Apply per-breakpoint.
    @each $name in map-keys($breakpoints) {
      // Get/use breakpoint setting if it exists.
      $x: map-get($configPerBreakpoint, $name);

      // Per-breakpoint config exists?
      @if $x {
        $y: map-get($x, "containers");

        // Setting exists? Use it.
        @if $y {
          $containers: $y;
        }
      }

      // Create @media block.
      @media screen and #{map-get($breakpoints, $name)} {
        @include containers($containers);
      }
    }
  }

  // Grid.
  $grid: map-get($config, "grid");

  @if $grid {
    /* Grid */

    // Use defaults if $grid is just "true".
    @if $grid == true {
      $grid: ();
    }

    // Sub-setting: Gutters.
    $grid-gutters: 40px;
    $x: map-get($grid, "gutters");

    @if $x {
      $grid-gutters: $x;
    }

    // Gutters (0%).
    // @include grid-gutters($grid-gutters, \30 \25, 0);

    // Apply base.
    // @include grid($grid-gutters);

    // Apply per-breakpoint.
    @each $name in map-keys($breakpoints) {
      // Get/use breakpoint setting if it exists.
      $x: map-get($configPerBreakpoint, $name);

      // Per-breakpoint config exists?
      @if $x {
        $y: map-get($x, "grid");

        // Setting exists?
        @if $y {
          // Sub-setting: Gutters.
          $x: map-get($y, "gutters");

          @if $x {
            $grid-gutters: $x;
          }
        }
      }

      // Create @media block.
      @media screen and #{map-get($breakpoints, $name)} {
        @include grid($grid-gutters, $name);
      }
    }
  }
}

